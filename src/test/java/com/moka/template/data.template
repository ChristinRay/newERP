package ${dataPackage};

import java.util.List;
import org.apache.ibatis.annotations.SelectKey;
import org.apache.ibatis.annotations.SelectProvider;
import org.apache.ibatis.annotations.UpdateProvider;
import org.apache.ibatis.annotations.DeleteProvider;
import org.apache.ibatis.annotations.InsertProvider;
import org.apache.ibatis.mapping.StatementType;

import ${modelPackage}.${tableClass};

public interface ${tableClass}Data {
	
	/**
	 * 插入操作
	 * @param entity
	 * @return
	 */
	@InsertProvider(type = ${tableClass}Provider.class, method = "insert${tableClass}")
	@SelectKey(before=false,keyProperty="${primaryKey}",resultType=Long.class,statementType=StatementType.STATEMENT,statement="SELECT LAST_INSERT_ID() AS id")
	public int insert${tableClass}(${tableClass} entity);
	/**
	 * 按条件查询总记录数
	 * @param entity
	 * @return
	 */
	@SelectProvider(type = ${tableClass}Provider.class, method = "select${tableClass}ByCount")
	public int select${tableClass}ByCount(${tableClass} entity);
	/**
	 * 按条件分页查询
	 * @param entity
	 * @param orderBy
	 * @param limit
	 * @param limitLen
	 * @return
	 */
	@SelectProvider(type = ${tableClass}Provider.class, method = "select${tableClass}ByLimt")
	public List<${tableClass}> select${tableClass}ByLimt(${tableClass} entity);
	/**
	 * 按条件查询记录
	 * @param entity
	 * @return
	 */
	@SelectProvider(type = ${tableClass}Provider.class, method = "select${tableClass}")
	public List<${tableClass}> select${tableClass}(${tableClass} entity);
	/**
	 * 根据主键id查询实体
	 * @param id
	 * @return
	 */
	@SelectProvider(type = ${tableClass}Provider.class, method = "selectOne")
	public ${tableClass} selectOne(long id);
	/**
	 * 更新实体
	 * @param entity
	 * @return
	 */
	@UpdateProvider(type = ${tableClass}Provider.class, method = "update${tableClass}")
	public int update${tableClass}(${tableClass} entity);
	/**
	 * 更新实体，过滤空值
	 * @param entity
	 * @return
	 */
	@UpdateProvider(type = ${tableClass}Provider.class, method = "update${tableClass}ByNullChk")
	public int update${tableClass}ByNullChk(${tableClass} entity);
	/**
	 * 物理删除实体
	 * @param id
	 * @return
	 */
	@DeleteProvider(type = ${tableClass}Provider.class, method = "delete${tableClass}")
	public int delete${tableClass}(long id);
	/**
	 * 逻辑删除实体
	 * @param entity
	 * @return
	 */
	@UpdateProvider(type = ${tableClass}Provider.class, method = "deleteByLogic")
	public int deleteByLogic(long id);
}
